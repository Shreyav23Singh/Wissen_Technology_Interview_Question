Q1 . What is the output of these code?

class Newthread extends Thread{
    Thread t; 
    String name;
    Newthread(String threadname){
        name=threadname;
        t=new Thread(this,name);
        t.start();
    }
    public void run(){
        
    }
    
}
class multithreaded_programming{
    public static void main(String args[]){
        Newthread obj1 =new Newthread("one");
        Newthread obj2 =new Newthread("two");
        try
        {
            obj1.t.wait();
            System.out.print(obj1.t.isAlive());
        }
        catch(Exception e){
            System.out.print("Main thread interrupted");
        }
    }
}

Output :- catch will execute and print statement will give i.e, Main thread interupted

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q2. what will happen if two java threads of the same priority are called to be processed simultaneously . Assumption only one CPU are available. 
1. Anyone will be executed first lexographically 
2. Both of them will be executed simultaneously 
3. None of them will be executed 
4. Decision will be taken up by os 

Ans : 4 
When two Java threads of the same priority are competing for the same CPU and only one CPU is available, the Java Virtual Machine (JVM) or the underlying operating system 
will decide which thread to execute. This decision is typically made by the operating system's thread scheduler.

The correct option is:

4. Decision will be taken up by the OS

The operating system's thread scheduler uses different scheduling algorithms to determine which thread gets to execute. The specific algorithm used may vary depending on 
the operating system. Common scheduling algorithms include round-robin, priority scheduling, and others.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q3. what will be the output of this code?
public class San{
    public static void main(String[] args){
        try{
            System.out.println("Hello World");
        }finally{
            System.out.println("finally executing");
        }
    }
    
}

Ans : Hello World
finally executing
The output of the given code will be:

```
Hello World
finally executing
```

In Java, the `finally` block is used to ensure that a certain piece of code is always executed, whether an exception is thrown or not. In this case, the `try` block contains
the statement `System.out.println("Hello World")`, which will be executed. After that, the `finally` block is executed, printing "finally executing."

Even if there were an exception thrown inside the `try` block, the `finally` block would still be executed before the exception is propagated up the call stack. 
In this specific example, since there's no exception, both the `try` block and the `finally` block are executed in sequence.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Q4. User

how much space will be required to store variable ? consider the each data sent place.

class HelloWorld {
    public static void main(String[] args) {
        String[] temp ={"Hi" , "participants"};
        int length=temp.length;
        for(int i=0;i<temp.length;i++){
            System.out.println(temp[i]);
        }
    }
}
1.  7
2.  3
3. 5
4. 4
Ans : 4
--------------------------------------------------------------------------------------------------------------------------------------------------
Q5. which java collection provides constant time on an average for basic operation like add , remove and contains . (Assuming there is a no hash collision ) 
1. TreeSet 
2. LinkedList 
3. HashSet(Ans)
4. TreeMap
Ans :
The Java collection that provides constant time on average for basic operations like add, remove, and contains (assuming no hash collision) is HashSet. HashSet is implemented using a hash table,
and if there are no hash collisions, the average time complexity for these operations is O(1).

In Java collections, the time complexity of basic operations like add, remove, and contains can vary based on the specific collection implementation.
Let's discuss the mentioned options:

TreeSet: This is typically implemented as a Red-Black Tree. The add, remove, and contains operations have a time complexity of O(log n) on average,
where n is the number of elements. It is not constant time but logarithmic.

LinkedList: The time complexity for add and remove operations in a LinkedList is O(1) when adding or removing elements at the beginning or end of the list.
However, for contains (searching), the time complexity is O(n) in the worst case, where n is the number of elements.

HashSet: Implemented using a hash table, the average time complexity for add, remove, and contains operations is O(1) under the assumption of a good hash 
function and minimal collisions. However, in rare cases with hash collisions, the time complexity can degrade to O(n), where n is the number of elements.

TreeMap: Similar to TreeSet, TreeMap is implemented as a Red-Black Tree. The average time complexity for add, remove, and contains operations is O(log n),
where n is the number of elements.


--------------------------------------------------------------------------------------------------------------------------------------------------
Q5. What will be the output of the following program ?
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
       ArrayList obj =new ArrayList();
       obj.add("A");
       obj.ensureCapacity(3);
       System.out.println(obj.size());
    }
}

1. 1 
2. 3
3. Compile Error
4.Runtime Error
Ans : 1
import java.util.*;: This line imports the entire java.util package, which includes the ArrayList class.

ArrayList obj = new ArrayList();: Here, an instance of the ArrayList class named obj is created. This ArrayList is initially empty.

obj.add("A");: The string "A" is added to the ArrayList obj.

obj.ensureCapacity(3);: This line ensures that the capacity of the ArrayList is at least 3. The ensureCapacity method is used
to increase the capacity of the ArrayList, if necessary, to ensure that it can hold at least the specified number of elements without needing to resize 
the internal data array. In this case, it is ensuring that the capacity is at least 3.

System.out.println(obj.size());: This prints the current size of the ArrayList obj. The size method returns the number of elements currently stored in the ArrayList.


--------------------------------------------------------------------------------------------------------------------------------------------------
Q6. what will be the output of this code?
class exception_handling{
    public static void main(String args[])
    {
        try{
            int a =args.length;
            int b=10/a;
            System.out.print(a);
            try{
                if(a==1)
                a=a/a-a; // a=0
                if(a == 2)
                {
                    int[] c = {1};
                    c[8] = 9;
                    
    
                }
            }
            catch(ArrayIndexOutOfBoundException e){
                System.out.println("Type A");
            }
            catch (ArithmeticException e){
                 System.out.println("Type B");
            }
        }
    }
}

Ans  error: reached end of file while parsing , error: 'try' without 'catch', 'finally' or resource declarations

******************* Correct Code *******************

The provided code has a syntax error, specifically in the nested try-catch block. There is a missing closing brace (`}`) for the inner try block. Here's the corrected version of the code:

```java
class exception_handling {
    public static void main(String args[]) {
        try {
            int a = args.length;
            int b = 10 / a;
            System.out.print(a);
            try {
                if (a == 1)
                    a = a / a - a; // a=0
                if (a == 2) { //line 1
                    int[] c = {1}; // line 2
                    c[8] = 9; // line 3
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println("Type A");
            } catch (ArithmeticException e) {
                System.out.println("Type B");
            }
        } catch (Exception e) {
            System.out.println("Outer Exception");
        }
    }
}
```

Now, let's analyze the code:

1. `int a = args.length;`: `a` is assigned the length of the command-line arguments.

2. `int b = 10 / a;`: If the length of the command-line arguments is 0, this line will result in an `ArithmeticException` due to division by zero.

3. `System.out.print(a);`: Prints the value of `a`.

4. Nested try-catch block:
   - If `a` is 1, it performs a calculation that sets `a` to 0.
   - If `a` is 2, it attempts to access an index (8) that is out of bounds for the array `c`, leading to an `ArrayIndexOutOfBoundsException`.

   Depending on the length of the command-line arguments, the code may encounter different exceptions.

Here are possible outputs:
- If the length of the command-line arguments is 0, it will result in an `ArithmeticException` and print "Type B".
- If the length of the command-line arguments is 1, it will set `a` to 0 and print "0".
- If the length of the command-line arguments is 2, it will attempt to access an out-of-bounds index and print "Type A".
- If there is any other issue, it will catch the general `Exception` in the outer catch block and print "Outer Exception".


## if (a == 2): This is a condition that checks if the value of variable a is equal to 2.

int[] c = {1};: This line declares and initializes an array c with a single element having the value 1.

c[8] = 9;: This line attempts to assign the value 9 to the element at index 8 of the array c. However, the array c was declared with only one element at index 0. 
So, this line will result in an ArrayIndexOutOfBoundsException because the index 8 is out of bounds for an array of size 1.  ##
        

